CREATE TABLE user(
	user_id    INTEGER,   
	first_name  CHAR(20), 
   	last_name  CHAR(20), 
   	email  CHAR(40), 
	birthday Date, 
	hometown CHAR(40), 
	gender CHAR(20), 
	password CHAR(20), 
   	score INTEGER, 
   	PRIMARY KEY (user_id)
   	);

CREATE TABLE friendship (
  	user_id1 INTEGER,      
  	user_id2 INTEGER, 
  	PRIMARY KEY (user_id1,user_id2), 
  	CHECK ( user_id1 IN 
  		(select user.user_id from user) AND
  		user_id2 IN 
  		(select user.user_id from user) AND 
  		user_id1 <> user_id2 ) 
  	);

CREATE TABLE album (
   	album_id   INTEGER,
   	name CHAR(20), 
   	user_id    INTEGER,  
   	create_date Date, 
   	PRIMARY KEY (album_id),
   	FOREIGN KEY (user_id) REFERENCES user
   	);

CREATE TABLE own (
   	user_id INTEGER,      
   	album_id INTEGER, 
  	PRIMARY KEY (user_id, album_id), 
  	FOREIGN KEY (user_id) REFERENCES user, 
  	FOREIGN KEY (album_id) REFERENCES album);
  	
CREATE TABLE photo (
   	photo_id   INTEGER,
   	caption CHAR(20), 
   	date Date, 
   	PRIMARY KEY (photo_id)
   	);
   	
CREATE TABLE contain (
   	album_id INTEGER,      
   	photo_id INTEGER, 
  	PRIMARY KEY (album_id, photo_id), 
  	FOREIGN KEY (album_id) REFERENCES album,
  	FOREIGN KEY (photo_id) REFERENCES photo);
  	
CREATE TABLE tag (
   	tag_id   INTEGER,
   	word CHAR(20), 
   	PRIMARY KEY (tag_id)
   	);
   	
   	
CREATE TABLE associate (
   	photo_id INTEGER,      
   	tag_id INTEGER, 
  	PRIMARY KEY (photo_id, tag_id), 
  	FOREIGN KEY (photo_id) REFERENCES photo,
  	FOREIGN KEY (tag_id) REFERENCES tag);
  	
  	
CREATE TABLE comment (
   	comment_id   INTEGER,
   	text CHAR(200), 
   	user_id    INTEGER,  
   	date Date, 
   	PRIMARY KEY (comment_id),
   	FOREIGN KEY (user_id) REFERENCES user
   	);
   	
CREATE TABLE about (
   	photo_id INTEGER,      
   	comment_id INTEGER, 
  	PRIMARY KEY (photo_id, comment_id), 
  	FOREIGN KEY (photo_id) REFERENCES photo,
  	FOREIGN KEY (comment_id) REFERENCES comment);
  	
  	
CREATE TABLE leave (
   	user_id INTEGER,      
   	comment_id INTEGER, 
  	PRIMARY KEY (user_id, comment_id), 
  	FOREIGN KEY (user_id) REFERENCES user,
  	FOREIGN KEY (comment_id) REFERENCES comment);